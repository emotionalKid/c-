3）转移字符：
1.转译字符
\?	防止出现3字母词
\’	用于表示字符’
\“	用于表示字符“
\\	用于表示斜杠，一个斜杠时会被解释为转义序列
\a	警告字符，电脑会发出蜂鸣
\b	退格符，相当于删除一个字符
\n	换行符
\r	回车符
\t	水平制表符，与tab效果相当
\v	垂直制表符，与换行类似
\ddd	表示1~3个八进制数，如\130
\xdd	表示1~2个十六进制数，如\x1a

2.格式输出：%·
%d,用来输出十进制整数。
%f,用来输出实数（包括单，双精度），以小数形式输出，默认情况下保留小数点6位。
%c,用来输出一个字符。
%s,用来输出一个字符串。
4）语句：
1.选择语句：
If
int main(){
	int i = 10;
	if (i == 10) {
		printf("yes");
	}
	else {
		printf("no");
	}
	return 0;
}
2.循环语句：
int main(){
	//while循环
	int i = 10;
	while (i > 0) {
		i--;
		printf("yes\n");
	}
	printf("no");
	return 0;

}
int main(){
	//do...while循环
	int i = 10;
	do {
		printf("yes\n");
		i--;
	} while (i > 0);
	return 0;
}
int main(){
	//for循环
	int i = 0;
	for(i =0; i<= 10;i++) {
		printf("i=%d", i);
		printf("\n");
	}
	return 0;
}
5）操作符
1 算术操作符
+ - * / %
+,-和*操作数我就不多说了，这里我们重点来 / 和%
/操作数
作用：就是求商
%操作数
2 移位操作符
<< 左移操作符
>> 右移操作符
注意：移位操作符移的是二进制位，且操作数只能是整数
<< 左移操作符
规则：左边抛弃、右边补0
>> 右移操作符
移位规则： 首先右移运算分两种：
1. 逻辑移位 左边用0填充，右边丢弃
2. 算术移位 左边用原该值的符号位填充，右边丢弃
1 右移操作和左移操作是本质都是对补码的二进制位进行操作
2 b=a>>n时，b的值位a/2^n,也就是说当我们左移1位时相当与除了个2倍
注意：
对于移位运算符，不要移动负数位，这个是标准未定义的。
3 位操作符
& //按位与
| //按位或
^ //按位异或
注：他们的操作数必须是整数。
我们这些位操作符都是针对操作数的补码进行操作的
&操作符
作用：对于二进制数，都为0才为0都为1才为1
 
|按位或
作用：二进制位中有一个为1就为1，
^按位异或
作用：二进制位中相异置1，相同为置0总结：
我们要想看二进制中的最低位是1还0，我们就可以通过&1来实现。
4 赋值操作符
=
这个操作符是用来赋值的，我们要于‘==’区分，这个是用来表示相等的，大家是否在编程的时候会弄错呢?下面教大家一种写法可以在很大程度上避免这种错误。
复合赋值符
+=
-=
*=
/=
%=
>>=
<<=
&=
|=
^=
这些都是=操作符的复合形式，举个例子。
a+=10;就相当于a=a+10;
a-=10;就相当于a=a-10;
5 单目操作符
! 逻辑反操作
- 负值
+ 正值
& 取地址
sizeof 操作数的类型长度（以字节为单位）
~ 对一个数的二进制按位取反
-- 前置、后置--
++ 前置、后置++
* 间接访问操作符(解引用操作符)
(类型) 强制类型转换
单目操作符的操作对像是1个，下面我们来一一细说。
5.1 ! 逻辑反操作
就是让真变假，假变真
代码举例：
#include<stdio.h>
int main()
{
	int a = 0;
	int b = 1;
	int c = !a;
	int d = !b;
	printf("c = %d,d = %d
", c, d);
	return 0;
}

5.2 sizeof 和数组
sizeof是用来求操作数的类型长度（以字节为单位）
下面我们来看到这段代码
#include <stdio.h>
void test1(int arr[])
{
	printf("%d
", sizeof(arr));//(2)
}
void test2(char ch[])
{
	printf("%d
", sizeof(ch));//(4)
}
int main()
{
	int arr[10] = { 0 };
	char ch[10] = { 0 };
	printf("%d
", sizeof(arr));//(1)
	printf("%d
", sizeof(ch));//(3)
	test1(arr);
	test2(ch);
	return 0;
}
他们的结果分别是 40 10 4 4，为什么呢？
第一个我们求的是整的数组的大小，arr有10个元素，每个元素都是整形，所有数组的大小为40个字节。
第二个ch有10个元素，每给个元素为char 类型,所以ch数组大小为10字节
第三个和第四个传的是数组名（本质上都是首元素地址）,那么对于test1和test2应该用指针来接收,所以在test1和test2其实求的是指针的大小，在32平台，指针的大小应该为4个字节。
6 关系操作符
>
>=
< <=
!= 用于测试“不相等”
== 用于测试“相等”
7 逻辑操作符
&& 逻辑与
|| 逻辑或
用一道例题来说明逻辑操作符
#include <stdio.h>
int main()
{
    int i = 0, a = 0, b = 2, c = 3, d = 4;
    i = a++ && ++b && d++;
    //i = a++||++b||d++;
    printf("a = %d
 b = %d
 c = %d
d = %d
", a, b, c, d);
    return 0;
}
8 条件操作符
xp1 ? exp2 : exp3
这个意思就是如果xp1为真，就执行exp2，否则就执行exp3。
9 逗号表达式
exp1, exp2, exp3,.......expN
逗号表达式，就是用逗号隔开的多个表达式。
逗号表达式，从左向右依次执行。整个表达式的结果是最后一个表达式的结果。
